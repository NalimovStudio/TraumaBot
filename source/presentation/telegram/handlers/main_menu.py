import logging

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from source.core.enum import SubscriptionType
from source.core.lexicon.bot import PROFILE_TEXT, HELP_TEXT, SUBSCRIPTION_MENU_TEXT
from source.core.schemas.user_schema import UserSchema
from source.presentation.telegram.callbacks.method_callbacks import HelpCallback
from source.presentation.telegram.keyboards.keyboards import (
    ButtonText,
    get_subscriptions_menu_keyboard,
    get_help_keyboard,
    get_support_methods_keyboard,
    get_main_keyboard
)
from source.presentation.telegram.states.user_states import SupportStates

router = Router(name=__name__)
logger = logging.getLogger(__name__)


@router.callback_query(HelpCallback.filter(F.menu == "back"))
async def handle_back_to_help(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} clicked 'Back to help', returning to main menu.")
    await state.clear()
    await query.answer()
    await query.message.answer(
        text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )
    await query.message.delete()


@router.callback_query(HelpCallback.filter(F.menu == "start_dialog"))
async def handle_start_dialog_from_help(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} started a new dialog from help menu.")
    await query.answer()
    await state.set_state(SupportStates.CHECK_IN)

    await query.message.delete()

    # TODO (–í–ª–∞–¥): –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å handler –∏ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å handle_help_support_methods
    await query.message.answer(
        text="–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?"
             "–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10",
        reply_markup=ReplyKeyboardRemove()
    )


@router.callback_query(HelpCallback.filter(F.menu == "methods"))
async def handle_support_methods(query: CallbackQuery, state: FSMContext):
    logger.info(f"User {query.from_user.id} requested support methods.")
    await state.set_state(SupportStates.METHOD_SELECT)
    await query.answer()

    await query.message.edit_text(
        text="–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
        reply_markup=get_support_methods_keyboard(),
    )


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def handle_back_to_main_menu(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} is returning to the main menu.")
    await state.clear()
    await message.answer(
        text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == ButtonText.START_DIALOG)
async def handle_start_dialog(message: Message, state: FSMContext):
    await state.set_state(SupportStates.CHECK_IN)
    # TODO (–í–ª–∞–¥): –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å handler –∏ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å handle_help_support_methods
    text = (
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å? "
        "–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10"
    )
    await message.answer(text=text, reply_markup=ReplyKeyboardRemove())


@router.message(F.text == ButtonText.HELP)
async def handle_help(message: Message):
    await message.answer(text=HELP_TEXT, reply_markup=get_help_keyboard())


@router.message(F.text == ButtonText.SUBSCRIPTION)
async def handle_subscription(message: Message):
    await message.answer(
        text=SUBSCRIPTION_MENU_TEXT,
        reply_markup=get_subscriptions_menu_keyboard()
    )


@router.message(F.text == ButtonText.PROFILE)
async def handle_profile(message: Message, user: UserSchema | None = None):
    logger.info(f"User {message.from_user.id} requested profile.")

    if user is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        return

    subscription_info = "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"
    if user.subscription != SubscriptionType.FREE and user.subscription_date_end:
        if user.subscription == SubscriptionType.DEFAULT:
            sub_type_str = "–°—Ç–∞–Ω–¥–∞—Ä—Ç üëë"
        elif user.subscription == SubscriptionType.PRO:
            sub_type_str = "Pro üíé"
        else:
            sub_type_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

        date_end_str = user.subscription_date_end.strftime("%d.%m.%Y")
        subscription_info = f"{sub_type_str} (–¥–æ {date_end_str})"

    text = PROFILE_TEXT.format(
        user_id=user.telegram_id,
        username=user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        subscription_type=subscription_info,
    )
    await message.answer(text=text)


@router.message(F.text, StateFilter(None))
async def handle_unknown_message_no_state(message: Message):
    """–í—ã–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Å—Ç–µ–π—Ç–∞—Ö –∏ –≤ –º–µ–Ω—é –∫–∏–¥–∞–µ—Ç"""
    await message.answer(
        text="–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É. –î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.",
        reply_markup=get_main_keyboard()
    )
